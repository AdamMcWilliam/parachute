const e = "https://api.pixelplush.dev/v1";
let t = "Pixel Parachute",
    a = {},
    o = {},
    r = "",
    n = 1920,
    s = 1080,
    i = .5;

function l(e) {
    return Math.floor(Math.random() * Math.floor(e))
}
window.setupGame = function(e, l, c) {
        t = e, a = l, o = c, r = a.path || "", o.clouds = void 0 === o.clouds || null === o.clouds ? !o.overlay : "true" === o.clouds, i = void 0 === o.volume || null === o.volume ? 0 : parseInt(o.volume) / 100, n = Math.min(window.innerWidth, 1920), s = Math.min(window.innerHeight, 1080)
    }, window.WebFontConfig = {
        custom: {
            families: ["Pixeltype"]
        },
        active() {
            !async function() {
                if (document.hidden) return void document.addEventListener("visibilitychange", () => {
                    location.reload()
                }, !1);
                try {
                    const e = (await fetch(`${r}/assets/shamelist.txt`).then(e => e.text())).split(",").map(e => e.trim().toLowerCase());
                    o.channel && e && e.includes(o.channel.toLowerCase()) && (console.log("This channel has been blocked for violating the PixelPlush Terms of Service."), p = !1)
                } catch (e) {
                    console.log(e)
                }
                Unicorn.Create("unicorn-display", {
                    width: n,
                    height: s,
                    background: "transparent",
                    init: J,
                    update: R,
                    channel: o.channel,
                    username: o.oauth ? o.channel : void 0,
                    password: o.oauth,
                    onCommand: g,
                    onChat: x,
                    screenWalls: !1,
                    gravity: {
                        x: 0,
                        y: 1
                    }
                }), ComfyJS.onCheer = b, ComfyJS.onConnected = async(e, t, r) => {
                    if (r) {
                        ! function() {
                            if (S = a.target_width || 368, _ = S / 2 + l(n - S), U = s - 47 + (a.target_offset || 0), Array.isArray(a.target)) {
                                w = 0, I = [];
                                for (let e = 0; e < a.target.length; e++) {
                                    let t = Unicorn.AddBacklay("target" + e, "target" + e, _, U, {
                                        scale: {
                                            x: 2,
                                            y: 2
                                        }
                                    });
                                    t.zIndex = 10, t.anchor.set(.5), t.visible = !1, I.push(t)
                                }
                                I[w].visible = !0, o.hideTilDrop || setInterval(() => {
                                    I[w].visible = !1, w = (w + 1) % I.length, I[w].visible = !0
                                }, 60)
                            } else I = Unicorn.AddBacklay("target", "target", _, U, {
                                scale: {
                                    x: 2,
                                    y: 2
                                }
                            }), I.zIndex = 10, I.anchor.set(.5);
                            a.target_front && (M = Unicorn.AddOverlay("target_front", "target_front", _, U, {
                                scale: {
                                    x: 2,
                                    y: 2
                                }
                            }), M.anchor.set(.5));
                            if (o.clouds)
                                for (let e = 0; e < 11; e++) {
                                    y++;
                                    let e = a.clouds[l(a.clouds.length)],
                                        t = Unicorn.AddOverlay("cloud_" + y, e, l(n), l(500), {
                                            scale: {
                                                x: 3,
                                                y: 3
                                            }
                                        });
                                    t.alpha = o.overlay ? .5 : .9, t.anchor.set(.5), t.speed = .01 + .1 * Math.random(), t.zIndex = t.speed, T.push(t)
                                }
                            o.hideTilDrop && (T.forEach(e => e.visible = !1), Array.isArray(a.target) ? I.forEach(e => {
                                e.visible = !1
                            }) : I.visible = !1, M.visible = !1)
                        }();
                        let e = await h();
                        0 !== e && (c = e.session, setInterval(() => {
                            h()
                        }, 6e4))
                    }
                }
            }()
        }
    },
    function() {
        const e = document.createElement("script");
        e.src = `${"https:"===document.location.protocol?"https":"http"}://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js`, e.type = "text/javascript", e.async = "true";
        const t = document.getElementsByTagName("script")[0];
        t.parentNode.insertBefore(e, t)
    }();
var c = "",
    p = !0;
async function h() {
    let a = Object.keys(L).length;
    return fetch(`${e}/analytics/heartbeat`, {
        method: "POST",
        body: JSON.stringify({
            session: c,
            game: "parachute",
            theme: t,
            channel: o.channel,
            players: Object.keys(L),
            count: a
        })
    }).then(e => e.json())
}
async function d(a, r, n, s) {
    return o.oauth ? fetch(`${e}/scores/add`, {
        method: "POST",
        body: JSON.stringify({
            token: o.oauth.replace("oauth:", ""),
            channel: o.channel,
            game: "parachute",
            theme: t,
            user: a,
            score: r,
            userId: n,
            username: s
        })
    }).then(e => e.json()) : {}
}
let y = 0,
    f = !0,
    u = [],
    m = !1;
async function g(t, r, n, s, i) {
    if (document.hidden) return;
    if (!s.broadcaster && !s.mod || "resetparachute" !== r && "resetdrop" !== r || location.reload(), (s.broadcaster || s.mod) && "queuedrop" === r && (m = !m, m ? ComfyJS.Say("/me Drops are queued this game. !startdrop to activate!") : ComfyJS.Say("/me Drops are no longer queued.")), (s.broadcaster || s.mod) && "startdrop" === r && m && (! function(e) {
            for (let t = e.length - 1; t > 0; t--) {
                const a = Math.floor(Math.random() * (t + 1));
                [e[t], e[a]] = [e[a], e[t]]
            }
        }(u), u.forEach(e => {
            D(e.username, e.name, e.color, e.message, a.parachutes[l(a.parachutes.length)], a.petparachutes[l(a.petparachutes.length)], e.emote, e.emoji, e.extra)
        }), u = []), (s.broadcaster || s.mod) && "testdrop" === r)
        for (var c = 0; c < 50; c++) y++, D("test" + y, "test_" + y, i.userColor || "#ffffff", Object.keys(a.characters)[l(Object.keys(a.characters).length)], a.parachutes[l(a.parachutes.length)], a.petparachutes[l(a.petparachutes.length)], "", "", i);
    if ((s.broadcaster || s.mod) && "droplet" === r) {
        let e = parseInt(n || Math.pow(10, l(6)));
        for (let t = 0; t < 5; t++) B(e)
    }
    if (("drophigh" === r || "drophighscore" === r || "dropbest" === r) && o.oauth) {
        let t = await async function() {
            if (o.oauth) {
                const t = new Date;
                t.setDate(t.getDate() - 1);
                const a = t.toISOString().split("T")[0];
                return (await fetch(`${e}/scores/high?channel=${o.channel}&game=parachute&date=${a}`, {
                    method: "GET"
                }).then(e => e.json()))[0]
            }
            return null
        }();
        t && t.score && ComfyJS.Say(`/me The highest score in the past 24 hours is ${t.score} by ${t.user}`)
    }
    if (("droplow" === r || "droplowscore" === r || "dropworst" === r) && o.oauth) {
        let t = await async function() {
            if (o.oauth) {
                const t = new Date;
                t.setDate(t.getDate() - 1);
                const a = t.toISOString().split("T")[0];
                return (await fetch(`${e}/scores/low?channel=${o.channel}&game=parachute&date=${a}`, {
                    method: "GET"
                }).then(e => e.json()))[0]
            }
            return null
        }();
        t && t.score && ComfyJS.Say(`/me The lowest score in the past 24 hours is ${t.score} by ${t.user}`)
    }
    if (("droptop" === r || "droptopscores" === r || "dropleaderboard" === r || "dropscores" === r) && o.oauth) {
        let t = await async function() {
            if (o.oauth) {
                const t = new Date;
                t.setDate(t.getDate() - 1);
                const a = t.toISOString().split("T")[0];
                return await fetch(`${e}/scores/high?channel=${o.channel}&game=parachute&date=${a}`, {
                    method: "GET"
                }).then(e => e.json())
            }
            return []
        }();
        if (t && t.length > 0) {
            let e = Array.from(new Set(t.map(e => e.userId))).slice(0, 10).map(e => t.find(t => t.userId === e));
            ComfyJS.Say(`/me Top players in the past 24 hours are ${e.map((e,t)=>`${t+1}. ${e.user} (${e.score})`).join(", ")}`)
        } else ComfyJS.Say("/me There are no scores recorded in the past 24 hours")
    }
    if ("droprecent" === r && o.oauth) {
        let t = await async function() {
            if (o.oauth) {
                return await fetch(`${e}/scores/recent?channel=${o.channel}&game=parachute`, {
                    method: "GET"
                }).then(e => e.json())
            }
            return []
        }();
        if (t && t.length > 0) {
            let e = Array.from(new Set(t.map(e => e.userId))).slice(0, 10).map(e => t.find(t => t.userId === e));
            ComfyJS.Say(`/me Latest scores are ${e.map((e,t)=>`${e.user} (${e.score})`).join(", ")}`)
        } else ComfyJS.Say("/me There are no recent scores")
    }
    let h = !1;
    if (o.command && r === o.command && (h = !0), o.command || "drop" !== r || (h = !0), p) {
        if (h) {
            f && o.hideTilDrop && (f = !1, T.forEach(e => e.visible = !0), Array.isArray(I) ? (I[w].visible = !0, setInterval(() => {
                I[w].visible = !1, w = (w + 1) % I.length, I[w].visible = !0
            }, 60)) : I.visible = !0, M && (M.visible = !0));
            const e = twemoji.parse(n, {
                assetType: "png"
            });
            !i.messageEmotes && e.length > 0 ? m ? u.push({
                username: i.username,
                name: t,
                color: i.userColor || "#ffffff",
                message: n,
                emote: "",
                emoji: e[0].url,
                extra: i
            }) : D(i.username, t, i.userColor || "#ffffff", n, a.parachutes[l(a.parachutes.length)], a.petparachutes[l(a.petparachutes.length)], "", e[0].url, i) : m ? u.push({
                username: i.username,
                name: t,
                color: i.userColor || "#ffffff",
                message: n,
                emote: i.messageEmotes ? Object.keys(i.messageEmotes)[0] : "",
                emoji: "",
                extra: i
            }) : D(i.username, t, i.userColor || "#ffffff", n, a.parachutes[l(a.parachutes.length)], a.petparachutes[l(a.petparachutes.length)], i.messageEmotes ? Object.keys(i.messageEmotes)[0] : "", "", i)
        }
    } else h && o.oauth && ComfyJS.Say("PixelParachute is disabled in this channel for violating the Terms of Service. To re-enable the game, please contact the PixelPlush team on Discord.")
}

function x(e, t, a, o, r) {
    document.hidden
}

function b(e, t, a, o, r) {
    if (!document.hidden && p)
        for (let e = 0; e < 5; e++) B(t)
}
let $, v = null,
    S = 368,
    _ = 0,
    U = 0,
    I = null,
    M = null,
    w = 0,
    L = {},
    A = 0,
    E = "",
    O = {},
    P = {},
    T = [],
    j = [],
    C = 0;

function k(e, t, a, o, r, n = "") {
    C++;
    let s = Math.min(Math.max(1, r), 100);
    Unicorn.AddParticles("Splash_" + C, {
            blendMode: PIXI.BLEND_MODES.DEFAULT,
            shape: "cone",
            angle: -Math.PI / 2,
            spread: Math.PI / 2,
            startColor: e,
            endColor: t,
            intensity: s,
            minSpeed: .05,
            maxSpeed: .25,
            gravityX: 0,
            gravityY: 3.5,
            fadeOut: !0,
            decay: 1,
            image: n || void 0
        }, a, o),
        function(e, t = 2e3) {
            setTimeout(() => {
                Unicorn.RemoveParticles(e)
            }, t)
        }("Splash_" + C, 150)
}

function z(e, t, o, r = "") {
    const n = a.target_boosh_scale || 2;
    a.target_boosh.forEach((a, o) => {
        for (let a = 0; a < l(5); a++) {
            C++;
            let o = Unicorn.AddBacklay("boosh_" + C, "target_boosh" + a, e, t + 10, {
                scale: {
                    x: n,
                    y: n
                }
            });
            o.zIndex = 11, o.vX = l(50) - 25, o.vY = -350 + l(100), o.anchor.set(.5), j.push(o)
        }
    })
}
async function D(t, s, c = "#ffffff", p, h, d, y = "", f = "", u) {
    if (!L[t]) {
        L[t] = {};
        let x = null,
            b = null,
            $ = null,
            S = tinycolor(c),
            _ = {};
        try {
            let a = await fetch(`${e}/accounts/twitch/design?username=${t}`).then(e => e.json());
            a && (_ = a.style || {})
        } catch (e) {
            console.log(e)
        }
        if (_.pet && _.pet.id && "pet_none" !== _.pet.id && (a.pets || (a.pets = {}), b = _.pet.id.replace("pet_", ""), !a.pets[b])) {
            a.pets[b] = {
                path: _.pet.path,
                minIdle: _.pet.minIdle,
                maxIdle: _.pet.maxIdle
            };
            for (let e = 0; e < 10; e++) {
                let t = _.pet.path + "_front";
                Unicorn.Load(t + e, `${r}/assets/pets/${b}/${t}/${t}${e+1}.png`)
            }
        }
        if (y) {
            if (!O[y]) {
                O[y] = !0;
                var m = `https://static-cdn.jtvnw.net/emoticons/v1/${y}/2.0`;
                return Unicorn.Load(`emote_${y}`, m), void setTimeout(() => {
                    delete L[t], D(t, s, c, p, h, d, y, f, u)
                }, 500)
            }
            x = Unicorn.AddObject("player_" + t, {
                type: "circle",
                scale: {
                    x: 1.2,
                    y: 1.2
                },
                animations: {
                    front: {
                        framerate: 4 / 60,
                        frames: [`emote_${y}`],
                        loop: !0
                    }
                },
                x: l(n),
                y: -100 - l(50),
                z: 100,
                radius: 36
            }), x.endImage = `emote_${y}`, x.endScale = 1.2
        } else if (f) {
            if (!P[f]) return P[f] = !0, Unicorn.Load(`emoji_${f}`, f), void setTimeout(() => {
                delete L[t], D(t, s, c, p, h, d, y, f, u)
            }, 500);
            x = Unicorn.AddObject("player_" + t, {
                type: "circle",
                scale: {
                    x: 1,
                    y: 1
                },
                animations: {
                    front: {
                        framerate: 4 / 60,
                        frames: [`emoji_${f}`],
                        loop: !0
                    }
                },
                x: l(n),
                y: -100 - l(50),
                z: 100,
                radius: 36
            }), x.endImage = `emoji_${f}`, x.endScale = 1
        } else {
            if (!a.characters[p])
                if (_.character && _.character.id) {
                    if (!a.characters[_.character.id]) {
                        a.characters[_.character.id] = _.character.path;
                        for (let e = 0; e < 10; e++) {
                            let t = a.characters[_.character.id];
                            Unicorn.Load(`${_.character.id}_${e}`, `${r}/assets/characters/${_.character.id}/${t}_front/${t}_front${e+1}.png`)
                        }
                    }
                    p = _.character.id
                } else p = a.playable[Math.floor(a.playable.length * Math.random())];
            if (x = Unicorn.AddObject("player_" + t, {
                    type: "circle",
                    scale: {
                        x: 3,
                        y: 3
                    },
                    animations: {
                        front: {
                            framerate: 4 / 60,
                            frames: [...Array(10).keys()].map(e => `${p}_${e}`),
                            loop: !0
                        }
                    },
                    x: l(n),
                    y: -100 - l(50),
                    z: 100,
                    radius: 36
                }), x.endImage = `${p}_0`, x.endScale = 3, "boybear" === p || "girlbear" === p) {
                var g = PIXI.utils.string2hex(S.brighten(50).toHexString());
                x.animations.front.tint = g
            }
        }
        if (b) {
            let e = {
                front: []
            };
            for (let t = 0; t < 10; t++) Object.keys(e).forEach(o => {
                e[o].push(a.pets[b].path + "_" + o + t)
            });
            $ = Unicorn.AddObject("pet_" + t, {
                type: "circle",
                scale: {
                    x: 3,
                    y: 3
                },
                animations: {
                    front: {
                        framerate: 4 / 60,
                        frames: e.front,
                        loop: !0
                    }
                },
                x: -1e3,
                y: -1e3,
                z: 200,
                radius: 24,
                isStatic: !0
            }), $.isSensor = !0
        }
        let U = Unicorn.AddBacklay("para_" + t, h, {
            scale: {
                x: 3,
                y: 3
            },
            x: 50,
            y: 0,
            z: 50
        });
        U.scale.x = 0, U.scale.y = 0, U.anchor.set(.5, 1);
        let I = Unicorn.AddText("name_" + t, s, -1e3, -1e3, {
            fontFamily: "Pixeltype",
            fontSize: 40,
            fontWeight: "bold",
            fill: c,
            lineJoin: "round",
            stroke: S.getLuminance() < .6 ? "#ffffff" : "#000000",
            strokeThickness: 6
        });
        I.anchor.set(.5);
        let M = Unicorn.AddText(t + "_points", "", -1e3, -1e3, {
            fontFamily: "Pixeltype",
            fontSize: 40,
            fontWeight: "bold",
            fill: "#ffd700",
            lineJoin: "round",
            stroke: "#000000",
            strokeThickness: 6
        });
        M.anchor.set(.5);
        let w = null;
        b && (w = Unicorn.AddBacklay("petpara_" + t, d || h, {
            scale: {
                x: 1,
                y: 1
            },
            x: 50,
            y: 0,
            z: 150
        }), w.scale.x = 0, w.scale.y = 0, w.anchor.set(.5, 1)), x.restitution = 1, x.friction = 0, x.frictionStatic = 0, x.frictionAir = 0, x.torque = -5 + l(10), x.rotationOffset = Math.random() * Math.PI, Unicorn.SetVelocity("player_" + t, l(24) - 12, 0), L[t] = {
            parachute: U,
            player: x,
            pet: $,
            petPara: w,
            petType: b,
            petOffset: 30 * Math.random() + (Math.random() > .5 ? -150 : 70),
            label: I,
            scoreLabel: M
        }, u && (L[t].userId = u.userId, L[t].name = u.displayName || u.username), Unicorn.PlaySound("sfx-parachute-drop", {
            volume: i
        }), v && clearTimeout(v), v = setTimeout(() => {
            location.reload()
        }, parseInt(o.cooldown || "90000"))
    }
}
async function B(e) {
    if (!o.droplets) return;
    C++;
    let t = null,
        r = 0;
    r = e < 100 ? 0 : e < 1e3 ? 1 : e < 5e3 ? 2 : e < 1e4 ? 3 : e < 1e5 ? 4 : 5;
    let s = 3;
    a.dropletSizes && (s *= a.dropletSizes[r]);
    let i = a.droplets[r];
    Array.isArray(a.droplets[r]) && (i = a.droplets[r][l(a.droplets[r].length)]), t = Unicorn.AddObject("droplet_" + C, {
        type: "circle",
        sprite: i,
        scale: {
            x: s,
            y: s
        },
        x: l(n),
        y: -100 - l(50),
        z: 100,
        radius: r / 5 * 4 + 20
    }), t.restitution = 1, t.friction = .5 * (5 - r), t.frictionStatic = 0, t.frictionAir = 0, t.torque = -1 + l(2), t.rotationOffset = Math.random() * Math.PI, Unicorn.SetVelocity("droplet_" + C, l(24) - 12, 0), setTimeout(() => {
        Unicorn.RemoveObject(t.label)
    }, 3e4)
}

function J() {
    if (PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST, Unicorn.Load("map", `${r}/assets/${a.bg}.png`), !o.overlay) {
        var e = Unicorn.AddBacklay("map", "map", 0, s - 1080);
        e.scale.x = 3, e.scale.y = 3
    }
    if (Array.isArray(a.target)) {
        a.target.map((e, t) => Unicorn.Load("target" + t, `${r}/assets/${e}.png`))
    } else {
        Unicorn.Load("target", `${r}/assets/${a.target}.png`)
    }
    a.target_front && Unicorn.Load("target_front", `${r}/assets/${a.target_front}.png`), a.target_boosh && a.target_boosh.forEach((e, t) => {
        Unicorn.Load("target_boosh" + t, `${r}/assets/${e}.png`)
    }), Unicorn.Load("star", `${r}/assets/icons/star.png`), $ = Unicorn.AddOverlay("star", "star", -1e3, -1e3, {
        scale: {
            x: 3,
            y: 3
        }
    }), $.anchor.set(.5), a.parachutes.forEach(e => Unicorn.Load(e, `${r}/assets/${e}.png`)), a.petparachutes ? a.petparachutes.forEach(e => Unicorn.Load(e, `${r}/assets/${e}.png`)) : a.petparachutes = [], Object.keys(a.characters).forEach(e => {
        for (let t = 0; t < 10; t++) {
            let o = a.characters[e];
            Unicorn.Load(`${e}_${t}`, `${r}/assets/characters/${e}/${o}_front/${o}_front${t+1}.png`)
        }
    }), a.clouds.forEach(e => Unicorn.Load(e, `${r}/assets/${e}.png`)), a.droplets.forEach(e => {
        Array.isArray(e) ? e.forEach(e => Unicorn.Load(e, `${r}/assets/${e}.png`)) : Unicorn.Load(e, `${r}/assets/${e}.png`)
    }), a.target_sound && Unicorn.Load("sfx-target-drop", `${r}/assets/${a.target_sound}`), Unicorn.Load("sfx-parachute-drop", `${r}/assets/${a.drop_sound}`), Unicorn.Load("sfx-parachute-flap", `${r}/assets/${a.parachute_sound}`), Unicorn.AddObject("WallLeft", {
        type: "rectangle",
        x: -200,
        y: 0,
        width: 400,
        height: 2 * s,
        isStatic: !0
    }).sprite.visible = !1, Unicorn.AddObject("WallRight", {
        type: "rectangle",
        x: n + 200,
        y: 0,
        width: 400,
        height: 2 * s,
        isStatic: !0
    }).sprite.visible = !1, Unicorn.AddObject("WallBottom", {
        type: "rectangle",
        x: .5 * n,
        y: s + 100,
        width: n,
        height: 200,
        isStatic: !0
    }).sprite.visible = !1, Matter.Events.on(physics, "beforeUpdate", (function(e) {
        for (var t in L) L[t].player && (L[t].player.position.y < .5 * -s ? L[t].player.velocity.y > 10 && Matter.Body.setVelocity(L[t].player, {
            x: L[t].player.velocity.x,
            y: 10
        }) : L[t].player.position.y > 300 && L[t].player.velocity.y > .5 && Matter.Body.setVelocity(L[t].player, {
            x: L[t].player.velocity.x,
            y: .5
        }))
    })), Matter.Events.on(physics, "afterUpdate", (function(e) {
        for (var t in L)
            if (L[t].pet) {
                let e = Math.min(3, Math.max(0, .3 * (L[t].player.position.y - 300)));
                L[t].petPara.scale.x = L[t].petPara.scale.y = e / 2, L[t].pet.angle = L[t].player.angle, L[t].pet.position.x = Math.max(20, Math.min(n - 20, L[t].player.position.x + L[t].petOffset)), L[t].pet.position.y = Math.min(L[t].player.position.y + 20, s - 46 - 50 + (a.target_y_offset || 0)), L[t].petPara.rotation = L[t].player.angle, L[t].petPara.position.x = L[t].pet.position.x, L[t].petPara.position.y = L[t].pet.position.y
            }
    }))
}

function R(e, t) {
    for (var r in L)
        if (L[r].player)
            if (L[r].isLanded) {
                let e = r === E ? 1 : .3;
                L[r].end.alpha = L[r].label.alpha = e, L[r].pet && (L[r].petEnd.alpha = e), L[r].scoreLabel.tint = L[r].label.tint = r === E ? 16777215 : 3355443, r === E ? (L[r].end.zIndex = L[r].scoreLabel.zIndex = L[r].label.zIndex = 9e3, L[r].pet && (L[r].pet.zIndex = 9001), L[r].label.position.x = L[r].player.position.x, L[r].label.position.y = L[r].player.position.y - 80, L[r].scoreLabel.position.x = L[r].label.position.x + 15, L[r].scoreLabel.position.y = L[r].label.position.y - 30, L[r].label.style.fontSize = 46, L[r].scoreLabel.style.fontSize = 46, $.x = L[r].scoreLabel.x - L[r].scoreLabel.width / 2 - 15, $.y = L[r].scoreLabel.y - 5) : (L[r].label.position.x = L[r].player.position.x, L[r].label.position.y = L[r].player.position.y - 60, L[r].scoreLabel.position.y = L[r].label.position.y - 30, L[r].scoreLabel.alpha = 0, L[r].label.style.fontSize = 40, L[r].scoreLabel.style.fontSize = 40)
            } else {
                if (L[r].pet && (L[r].pet.position.x = Math.max(20, Math.min(n - 20, L[r].player.position.x + L[r].petOffset)), L[r].pet.position.y = Math.min(L[r].player.position.y + 20, s - 46 - 50 + (a.target_y_offset || 0)), L[r].petPara.position.x = L[r].pet.position.x, L[r].petPara.position.y = L[r].pet.position.y), L[r].player.position.y > s - 46 - 50 + (a.target_y_offset || 0)) {
                    L[r].isLanded = !0, L[r].parachute.scale.x = L[r].parachute.scale.y = 0, L[r].pet && (L[r].petPara.scale.x = L[r].petPara.scale.y = 0);
                    let e = Unicorn.AddBacklay("end_" + r, L[r].player.endImage, L[r].player.position.x, L[r].player.position.y, {
                        scale: {
                            x: L[r].player.endScale,
                            y: L[r].player.endScale
                        }
                    });
                    if (L[r].player.animations && (e.tint = L[r].player.animations.front.tint), e.anchor.set(.5), e.zIndex = 20, L[r].player.isStatic = !0, L[r].score = 100 * Math.max(0, S / 2 - Math.abs(_ - L[r].player.position.x)) / (S / 2), e.alpha = L[r].score > 0 ? 1 : .3, L[r].end = e, L[r].pet) {
                        let e = Unicorn.AddBacklay("petend_" + r, `${L[r].petType}_front0`, L[r].pet.position.x, L[r].pet.position.y, {
                            scale: {
                                x: 3,
                                y: 3
                            }
                        });
                        L[r].pet.animations && (e.tint = L[r].pet.animations.front.tint), e.anchor.set(.5), e.zIndex = 30, L[r].pet.isStatic = !0, e.alpha = L[r].score > 0 ? 1 : .3, L[r].petEnd = e
                    }
                    if (L[r].score > 0 && (a.target_particles && k(a.target_particles[0], a.target_particles[1], L[r].player.position.x, L[r].player.position.y + 40, 10), a.target_boosh && z(L[r].player.position.x, L[r].player.position.y + 40), a.target_sound && Unicorn.PlaySound("sfx-target-drop", {
                            volume: i
                        }), L[r].scoreLabel.x = L[r].label.position.x, L[r].scoreLabel.y = L[r].label.position.y - 30, L[r].scoreLabel.text = L[r].score.toFixed(2), !r.startsWith("test_"))) {
                        if (o.messageFormat) {
                            let e = o.messageFormat.replace("USERNAME", L[r].name).replace("POINTS", L[r].score.toFixed(2)).replace("SHORTPTS", Math.floor(L[r].score));
                            setTimeout(() => {
                                ComfyJS.Say(e)
                            }, 5e3)
                        }
                        d(L[r].name, L[r].score.toFixed(2), L[r].userId, r)
                    }
                    L[r].score > A && (A = L[r].score, E = r), L[r].label.alpha = L[r].score > 0 ? 1 : .3, Unicorn.RemoveObject(L[r].player.label), Unicorn.RemoveBacklay("para_" + r), L[r].pet && (Unicorn.RemoveObject(L[r].pet.label), Unicorn.RemoveBacklay("petpara_" + r))
                } else if (L[r].player.position.y > 300) {
                    let t = Math.min(3, Math.max(0, .3 * (L[r].player.position.y - 300)));
                    L[r].parachute.scale.x <= 0 && t > 0 && Unicorn.PlaySound("sfx-parachute-flap", {
                        volume: i
                    }), L[r].parachute.scale.x = L[r].parachute.scale.y = t, L[r].parachute.rotation = Math.sin(L[r].player.rotationOffset + e / 1e3) * Math.PI / 16, L[r].player.angle = Math.sin(L[r].player.rotationOffset + e / 1e3) * Math.PI / 16, L[r].parachute.position.x = L[r].player.position.x, L[r].parachute.position.y = L[r].player.position.y - 10 - (a.parachute_offset || 0)
                } else L[r].player.position.y < .5 * -s || (L[r].parachute.scale.x = L[r].parachute.scale.y = 0, L[r].pet && (L[r].petPara.scale.x = L[r].petPara.scale.y = 0));
                L[r].label.position.x = L[r].player.position.x, L[r].label.position.y = L[r].player.position.y - 60
            } T.forEach((e, a) => {
        e.x -= t * e.speed, e.x + e.width / 2 <= 0 && (e.x = n + e.width / 2, e.y = l(500), e.speed = .01 + .1 * Math.random(), e.zIndex = e.speed)
    }), j.forEach(e => {
        (e.vY < 0 || e.y < s - 20) && (e.x += t / 1e3 * e.vX, e.y += t / 1e3 * e.vY, e.vY < 20 && (e.vY += t / 1e3 * 200))
    })
    // if(L['siifr'] && !L['siifr'].isLanded){
    //     console.log(L['siifr'].player)
    // }
}
